import type { NextPage } from "next";
import { Todos } from "@prisma/client";
import Head from "next/head";
import React, { useState } from "react";
import { TiTickOutline } from "react-icons/ti";
import { FiSend } from "react-icons/fi";
import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  const [name, setName] = useState<Todos["name"]>("");
  const [activeTab, setActiveTab] = useState("activeTodos");

  const ctx = trpc.useContext();

  const { data: todos, isLoading: isTodosLoading } = trpc.todos.list.useQuery();

  const addTodoMutation = trpc.todos.addTodo.useMutation({
    onSuccess: () => {
      ctx.todos.list.invalidate();
    },
  });

  const { data: completedTodos, isLoading: isCompletedTodosLoading } =
    trpc.todos.getActive.useQuery();

  const setTodoMutation = trpc.todos.setTodo.useMutation({
    onSuccess: () => {
      ctx.todos.list.invalidate();
      ctx.todos.getActive.invalidate();
    },
  });

  return (
    <>
      <Head>
        <title>Todo App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex min-h-screen flex-col items-center justify-center  bg-slate-800">
        <div className="flex w-[400px] gap-2">
          {/* todo input */}
          <input
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-3/4 rounded-md p-2 outline-none"
            type="text"
          />
          <button
            onClick={(e) => {
              e.preventDefault();
              addTodoMutation.mutate({ name });
            }}
            className="flex flex-1 items-center justify-center rounded-md bg-orange-500 p-2 text-2xl"
          >
            <FiSend style={{ color: "white" }} />
          </button>
        </div>
        <div className="mt-2 w-[400px]">
          {activeTab === "activeTodos" && (
            <ul className="flex w-full flex-col divide-y-2 divide-slate-400 rounded-t-md bg-gray-200">
              {isTodosLoading ? (
                <div className="flex items-center justify-center p-20">
                  Loading..
                </div>
              ) : (
                todos?.map((todo) => (
                  <li key={todo.id} className="flex items-center gap-1 p-2">
                    <button
                      onClick={() => {
                        setTodoMutation.mutate({
                          id: todo.id,
                          checked: !todo.checked,
                        });
                      }}
                      className={`rounded-full border-4  text-2xl ${
                        todo.checked ? "border-green-800" : "border-gray-800"
                      }`}
                    >
                      <TiTickOutline />
                    </button>
                    <p className="text-xl leading-none">{todo.name}</p>
                  </li>
                ))
              )}
            </ul>
          )}
          {activeTab === "completedTodos" && (
            <ul className="flex w-full flex-col divide-y-2 divide-slate-400 rounded-t-md bg-gray-200">
              {isCompletedTodosLoading ? (
                <div className="flex items-center justify-center p-20">
                  Loading..
                </div>
              ) : (
                completedTodos?.map((todo) => (
                  <li key={todo.id} className="flex items-center gap-1 p-2">
                    <button
                      onClick={() => {
                        setTodoMutation.mutate({
                          id: todo.id,
                          checked: !todo.checked,
                        });
                      }}
                      className={`rounded-full border-4  text-2xl ${
                        todo.checked ? "border-green-800" : "border-gray-800"
                      }`}
                    >
                      <TiTickOutline />
                    </button>
                    <p className="text-xl leading-none">{todo.name}</p>
                  </li>
                ))
              )}
            </ul>
          )}
          <div className="hidden h-48 w-full bg-gray-400"></div>
        </div>
        <div className="flex w-[400px]">
          <button
            onClick={() => {
              setActiveTab("activeTodos");
            }}
            className="flex w-1/3 justify-center rounded-bl-md bg-slate-300 p-2 duration-200 hover:bg-slate-400"
          >
            Active
          </button>
          <button
            onClick={() => {
              setActiveTab("completedTodos");
            }}
            className="flex w-1/3 justify-center bg-slate-300 p-2 duration-200 hover:bg-slate-400"
          >
            Completed
          </button>
          <button
            onClick={() => {
              setActiveTab("archivedTodos");
            }}
            className="flex w-1/3 justify-center rounded-br-md bg-slate-300 p-2 duration-200 hover:bg-slate-400"
          >
            Archived
          </button>
        </div>
      </div>
    </>
  );
};

export default Home;
