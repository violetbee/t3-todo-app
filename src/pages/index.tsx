import { Todos } from "@prisma/client";
import type { NextPage } from "next";
import Head from "next/head";
import React, { useState } from "react";
import { TiTickOutline } from "react-icons/ti";
import { FiSend } from "react-icons/fi";
import { useMutationProvider } from "../context/mutation";

const Home: NextPage = () => {
  const [name, setName] = useState<Todos["name"]>("");
  const [isActive, setIsActive] = useState<Todos["checked"]>(false);
  const { todos, addTodoMutation, isTodosLoading } = useMutationProvider();

  const addTodoHandler = (e: React.MouseEvent<HTMLElement>) => {
    e.preventDefault();
    addTodoMutation.mutate({ name });
  };

  console.log(todos);
  return (
    <>
      <Head>
        <title>Todo App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex min-h-screen flex-col items-center justify-center  bg-slate-800">
        <div className="flex w-[400px] gap-2">
          {/* todo input */}
          <input
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-3/4 rounded-md p-2 outline-none"
            type="text"
          />
          <button
            onClick={addTodoHandler}
            className="flex flex-1 items-center justify-center rounded-md bg-orange-500 p-2 text-2xl"
          >
            <FiSend style={{ color: "white" }} />
          </button>
        </div>
        <div className="mt-2 w-[400px]">
          <ul className="flex w-full flex-col divide-y-2 divide-slate-400 rounded-t-md bg-gray-200">
            {isTodosLoading ? (
              <div className="flex items-center justify-center p-20">
                Loading..
              </div>
            ) : (
              todos.map((todo) => (
                <li key={todo.id} className="flex items-center gap-1 p-2">
                  <button
                    onClick={(e) => {
                      e.preventDefault();
                      setIsActive(!isActive);
                    }}
                    className="rounded-full border-4 border-green-700 text-2xl"
                  >
                    <TiTickOutline />
                  </button>
                  <p className="text-xl leading-none">{todo.name}</p>
                </li>
              ))
            )}
          </ul>
          <div className="hidden h-48 w-full bg-gray-400"></div>
          <div className="hidden h-48 w-full bg-gray-400"></div>
        </div>
        <div className="flex w-[400px]">
          <button className="flex w-1/3 justify-center rounded-bl-md bg-slate-300 p-2 duration-200 hover:bg-slate-400">
            Active
          </button>
          <button className="flex w-1/3 justify-center bg-slate-300 p-2 duration-200 hover:bg-slate-400">
            Completed
          </button>
          <button className="flex w-1/3 justify-center rounded-br-md bg-slate-300 p-2 duration-200 hover:bg-slate-400">
            Archived
          </button>
        </div>
      </div>
    </>
  );
};

export default Home;
